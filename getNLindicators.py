#!/usr/bin/env python

"""
Dan O'Day, Purdue University
CNIT581 Cyber Forensics of Malware

Extract natural language host-based indicators from malware sample objects
"""

__author__ = "Dan O'Day"
__credits__ = ["Dan O'Day", "Sam Liles"]
__license__ = "GNU General Public License"
__version__ = "0.1"
__maintainer__ = "Dan O'Day"
__email__ = "doday@purdue.edu"
__status__ = "Development"


import os
import sys
from malware import MalwareSample
from nltk.tokenize import WordPunctTokenizer
from nltk.corpus import wordnet


def enumerate_files(folders):
    """
    Iterates through supplied folder(s) for PE32 files (.dll or .exe), creates malware sample objects

    :param folders: folder(s) containing PE32 files (.dll or .exe)
    :return: list of (parsed) malware sample objects
    """
    msl = []  # list of malware sample objects
    for folder in folders:
        for root, dirs, files in os.walk(folder):
            for fn in files:
                if fn.lower().endswith(".exe") or fn.lower().endswith(".dll"):
                    print "---------------------------------------------------------------------------"
                    print "analyzing", os.path.join(root, fn), "..."
                    ms = MalwareSample(os.path.join(root, fn))
                    msl.append(ms)  # add processed malware sample to list (msl)
    return msl


def extract_nl_text(ms):
    """
    Extracts and tokenizes text from malware sample object

    :param ms: MalwareSample object
    :return: list of tokenized strings found in malware sample object's internal strings list
    """
    wpt = WordPunctTokenizer()
    all_tokenized_strings_in_ms = []
    inside_xml_privileges = False
    for s in ms.strings:
        if 'requestedPrivileges' in s or 'This program cannot be run in DOS mode' in s:
            continue
        elif inside_xml_privileges:
            continue
        elif '<assembly xmlns' in s:
            inside_xml_privileges = True
            continue
        elif '</assembly>' in s:
            inside_xml_privileges = False
            continue

        tokenized_string = []
        tokens = wpt.tokenize(s)
        if tokens:
            for t in tokens:
                if wordnet.synsets(t) and len(t) > 3:  # had to use length to eliminate false positives
                    tokenized_string.extend(tokens)
                    break
        if tokenized_string:
            all_tokenized_strings_in_ms.append(tokenized_string)
    return all_tokenized_strings_in_ms


def process_malware_sample(ms):
    """
    Central function for calling other functions used in processing malware sample objects

    :param ms: MalwareSample object
    """
    tokenized_strings_in_ms = extract_nl_text(ms)
    print 'Strings from', str(ms), tokenized_strings_in_ms


def main():
    args = sys.argv[1:]

    if not args:
        print 'No arguments specified.\nusage: ./malwareNLIndicators.py {folder(s) containing malware sample(s)}\n'
        sys.exit(1)

    malware_samples = enumerate_files(args)  # returns list of malware sample objects
    for ms in malware_samples:
        process_malware_sample(ms)


if __name__ == '__main__':
    main()